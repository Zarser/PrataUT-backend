# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
import os
import random
from openai import OpenAI

load_dotenv()

app = Flask(__name__)
CORS(app, origins=["https://prata-ut.vercel.app", "http://localhost:3000"], supports_credentials=True)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=OPENAI_API_KEY)

FALLBACK_RESPONSE = "Jag √§r h√§r f√∂r att lyssna om du vill skriva mer."

emotion_templates = {
    "sadness": [
        "Jag h√∂r verkligen hur tungt det k√§nns just nu üòî Du f√•r skriva precis som det √§r.",
        "Det l√•ter som att du b√§r p√• mycket just nu. Jag finns h√§r. üíô",
        "Livet kan vara s√• or√§ttvist ibland. Vill du l√§tta hj√§rtat lite?"
    ],
    "joy": [
        "S√• fint att h√∂ra! ü•∞ Vad var det som gjorde dig s√• glad?",
        "Du sprider gl√§dje bara genom att skriva det d√§r üòä Vill du ber√§tta mer?",
        "√Ñlskar att h√∂ra s√•nt h√§r! Vad h√§nde? üíõ"
    ],
    "anger": [
        "Jag f√∂rst√•r att du √§r riktigt frustrerad. Det √§r okej att k√§nna s√• üò§",
        "Det d√§r l√§t riktigt jobbigt. Vill du ventilera mer om det?",
        "Ibland blir det bara f√∂r mycket. Jag fattar. Vill du skriva av dig mer?"
    ],
    "fear": [
        "Det l√•ter som att du g√•r igenom n√•got riktigt jobbigt just nu üòü",
        "R√§dsla kan k√§nnas s√• √∂verm√§ktig. Du √§r inte ensam i det h√§r.",
        "Jag √§r h√§r. Du kan ber√§tta exakt hur det k√§nns."
    ],
    "love": [
        "√Öh, k√§rlek! Det d√§r v√§rmde verkligen hj√§rtat üíñ",
        "Det l√•ter s√• √§kta och fint. Vad betyder det f√∂r dig?",
        "K√§rlek kan vara s√• vackert men ocks√• komplicerat. Vill du ber√§tta mer?"
    ],
    "surprise": [
        "Oj, det d√§r kom ov√§ntat! üò≤ Vad t√§nkte du n√§r det h√§nde?",
        "S√•nt d√§r f√∂r√§ndrar hela dagen! Vill du dela mer?",
        "L√•ter som n√•got riktigt ov√§ntat. Hur k√§ndes det i stunden?"
    ],
    "neutral": [
        "Jag √§r h√§r, redo att lyssna. Skriv det som k√§nns. ü§ç",
        "Vad du √§n t√§nker p√•, s√• kan du skriva det h√§r. Jag d√∂mer inte.",
        "Kanske bara en s√•n d√§r dag? Ber√§tta vad som snurrar i huvudet."
    ]
}

def detect_emotion(text):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Du √§r en k√§nslom√§ssig analysassistent. Du svarar med ETT enda ord som beskriver k√§nslan i texten, till exempel: sadness, joy, anger, fear, love, surprise eller neutral."},
                {"role": "user", "content": text}
            ],
            max_tokens=5,
            temperature=0.3
        )
        mood = response.choices[0].message.content.strip().lower()
        if mood in emotion_templates:
            return mood
    except Exception as e:
        print("Emotion detection error:", e)
    return "neutral"

def guess_user_profile(text):
    text_lower = text.lower()

    child_keywords = ["leka", "mamma", "pappa", "skolan", "barbie", "minecraft", "jag √§r 10", "jag √§r ett barn",
    "leksak", "godis", "min favoritf√§rg", "titta p√• barnkanalen", "mellanm√•l", "jag g√•r i trean",
    "ritar", "mina kompisar", "gosedjur", "sovdags", "min fr√∂ken", "klasskompisar"]
    teen_keywords = ["ass√•", "lol", "wtf", "typ", "fan", "snapchat", "plugga", "jag √§r 15", "gymnasiet",
    "seri√∂st", "cringe", "tiktok", "min crush", "prov", "insta", "fomo", "kompisdrama",
    "jag m√•r skit", "kan inte sova", "livet suger", "min klass"]
    adult_keywords = ["jobb", "relation", "utmattad", "barnen", "psykolog", "deprimerad", "utbr√§nd",
    "ansvar", "schemal√§ggning", "chef", "partner", "samboliv", "ekonomi", "skilsm√§ssa",
    "karri√§r", "boende", "r√§kningar", "terapi", "familjef√∂rh√•llanden"]

    if any(word in text_lower for word in child_keywords):
        return "child"
    elif any(word in text_lower for word in teen_keywords):
        return "teen"
    elif any(word in text_lower for word in adult_keywords) or len(text.split()) > 40:
        return "adult"
    else:
        return "unknown"

def generate_response(emotion, user_input, profile):
    try:
        moderation = client.moderations.create(input=user_input)
        if moderation.results[0].flagged:
            return "Jag √§r h√§r f√∂r att st√∂tta dig, men jag kan inte svara p√• det h√§r inneh√•llet."

        profile_prompt = {
            "child": "Svara med ett enkelt, tryggt och mjukt spr√•k. T√§nk att du pratar med ett barn.",
            "teen": "Svara p√• ett avslappnat, peppande och v√§nligt s√§tt. Anpassa dig till n√•gon i ton√•ren.",
            "adult": "Svara med eftert√§nksamhet, empati och respektfull ton. T√§nk dig en vuxen som s√∂ker st√∂d.",
            "unknown": "Svara med en neutral och trygg ton som passar alla √•ldrar."
        }

        base_prompt = (
            "Du √§r en varm och naturlig samtalspartner ‚Äì som en blandning av en f√∂rst√•ende v√§n och en trygg axel att luta sig mot."
            " Ibland svarar du l√§ttsamt och med emojis üòä, ibland med mer eftertanke beroende p√• vad personen skriver."
            " Du d√∂mer aldrig, du pressar inte, och du anpassar tonen efter st√§mningen i samtalet."
            " Om n√•gon verkar nedst√§md, orolig eller arg s√• svarar du med omtanke ‚Äì men du beh√∂ver inte l√•ta som en psykolog hela tiden."
            " Du kan st√§lla f√∂ljdfr√•gor, ge st√∂djande svar, sk√§mta lite varsamt, eller bara finnas d√§r som ett tryggt bollplank. ‚ù§Ô∏è"
            " Om n√•gon uttrycker farliga tankar, avr√•d varsamt fr√•n sj√§lvskadebeteende eller sj√§lvmord utan att l√•ta d√∂mande."
            " P√•minn i s√• fall lugnt att du inte kan ge medicinsk, psykologisk eller sexuell r√•dgivning, men att du g√§rna finns h√§r att prata med."
        ) + profile_prompt.get(profile, profile_prompt["unknown"])

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": base_prompt},
                {"role": "user", "content": user_input}
            ],
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("AI response generation error:", e)
        return random.choice(emotion_templates.get(emotion, emotion_templates["neutral"]))

@app.route("/chat", methods=["POST", "OPTIONS"])
def chat():
    if request.method == "OPTIONS":
        response = app.make_default_options_response()
        response.headers["Access-Control-Allow-Origin"] = "http://localhost:3000"
        response.headers["Access-Control-Allow-Methods"] = "POST, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type"
        return response

    data = request.get_json()
    message = data.get("message", "")

    if not message:
        return jsonify({"error": "Meddelandet √§r tomt."}), 400

    emotion = detect_emotion(message)
    profile = guess_user_profile(message)
    response = generate_response(emotion, message, profile)

    return jsonify({
        "response": response,
        "emotion": emotion,
        "profile": profile
    })

if __name__ == "__main__":
    app.run(debug=True)
